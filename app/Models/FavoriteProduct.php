<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Support\Carbon;
use OpenApi\Annotations as OA;

/**
 * Ingredient model
 *
 * @OA\Schema(
 *     @OA\Xml(name="FavoriteProduct"),
 *     @OA\Property(property="id", type="int"),
 *     @OA\Property(property="uuid", type="string"),
 *     @OA\Property(property="name", type="string"),
 *     @OA\Property(property="product1_id", type="int"),
 *     @OA\Property(property="product2_id", type="int"),
 *     @OA\Property(property="product3_id", type="int"),
 *     @OA\Property(property="categories", type="int"),
 *     @OA\Property(property="created_at", type="string", format="date-time"),
 *     @OA\Property(property="updated_at", type="string", format="date-time"),
 * );
 *
 * @package App\Models
 *
 * Fields
 * @property int $id
 * @property string $uuid
 * @property string $name
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 *
 * @property Category|null $categories
 * @property Product|null $product1_id
 * @property Product|null $product2_id
 * @property Product|null $product3_id
 */

class FavoriteProduct extends Model
{
    use HasFactory;

    protected $fillable = [
        'id',
        'name',
        'product1_id',
        'product2_id',
        'product3_id',
    ];

    /**
     * @return void
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($model) {
            $model->categories()->detach();
        });
    }

    /**
     * @return BelongsTo
     */
    public function product1(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'product1_id');
    }

    /**
     * @return BelongsTo
     */
    public function product2(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'product2_id');
    }

    /**
     * @return BelongsTo
     */
    public function product3(): BelongsTo
    {
        return $this->belongsTo(Product::class, 'product3_id');
    }

    /**
     * @return MorphToMany
     */
    public function categories(): MorphToMany
    {
        return $this->morphToMany(Category::class, 'categoryable')
            ->using(Categoryable::class);
    }
}
